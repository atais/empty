package com.github.atais.empty

import com.github.atais._

object EmptyInstances extends ShapelessInstances with PrimitiveInstances {

  implicit val emptyFoo0: Empty[Foo0] = genericEmpty
  implicit val emptyFoo1: Empty[Foo1] = genericEmpty
  implicit val emptyFoo2: Empty[Foo2] = genericEmpty
  implicit val emptyFoo3: Empty[Foo3] = genericEmpty
  implicit val emptyFoo4: Empty[Foo4] = genericEmpty
  implicit val emptyFoo5: Empty[Foo5] = genericEmpty
  implicit val emptyFoo6: Empty[Foo6] = genericEmpty
  implicit val emptyFoo7: Empty[Foo7] = genericEmpty
  implicit val emptyFoo8: Empty[Foo8] = genericEmpty
  implicit val emptyFoo9: Empty[Foo9] = genericEmpty
  implicit val emptyFoo10: Empty[Foo10] = genericEmpty
  implicit val emptyFoo11: Empty[Foo11] = genericEmpty
  implicit val emptyFoo12: Empty[Foo12] = genericEmpty
  implicit val emptyFoo13: Empty[Foo13] = genericEmpty
  implicit val emptyFoo14: Empty[Foo14] = genericEmpty
  implicit val emptyFoo15: Empty[Foo15] = genericEmpty
  implicit val emptyFoo16: Empty[Foo16] = genericEmpty
  implicit val emptyFoo17: Empty[Foo17] = genericEmpty
  implicit val emptyFoo18: Empty[Foo18] = genericEmpty
  implicit val emptyFoo19: Empty[Foo19] = genericEmpty
  implicit val emptyFoo20: Empty[Foo20] = genericEmpty
  implicit val emptyFoo21: Empty[Foo21] = genericEmpty
  implicit val emptyFoo22: Empty[Foo22] = genericEmpty
  implicit val emptyFoo23: Empty[Foo23] = genericEmpty
  implicit val emptyFoo24: Empty[Foo24] = genericEmpty
  implicit val emptyFoo25: Empty[Foo25] = genericEmpty
  implicit val emptyFoo26: Empty[Foo26] = genericEmpty
  implicit val emptyFoo27: Empty[Foo27] = genericEmpty
  implicit val emptyFoo28: Empty[Foo28] = genericEmpty
  implicit val emptyFoo29: Empty[Foo29] = genericEmpty
  implicit val emptyFoo30: Empty[Foo30] = genericEmpty
  implicit val emptyFoo31: Empty[Foo31] = genericEmpty
  implicit val emptyFoo32: Empty[Foo32] = genericEmpty
  implicit val emptyFoo33: Empty[Foo33] = genericEmpty
  implicit val emptyFoo34: Empty[Foo34] = genericEmpty
  implicit val emptyFoo35: Empty[Foo35] = genericEmpty
  implicit val emptyFoo36: Empty[Foo36] = genericEmpty
  implicit val emptyFoo37: Empty[Foo37] = genericEmpty
  implicit val emptyFoo38: Empty[Foo38] = genericEmpty
  implicit val emptyFoo39: Empty[Foo39] = genericEmpty
  implicit val emptyFoo40: Empty[Foo40] = genericEmpty
  implicit val emptyFoo41: Empty[Foo41] = genericEmpty
  implicit val emptyFoo42: Empty[Foo42] = genericEmpty
  implicit val emptyFoo43: Empty[Foo43] = genericEmpty
  implicit val emptyFoo44: Empty[Foo44] = genericEmpty
  implicit val emptyFoo45: Empty[Foo45] = genericEmpty
  implicit val emptyFoo46: Empty[Foo46] = genericEmpty
  implicit val emptyFoo47: Empty[Foo47] = genericEmpty
  implicit val emptyFoo48: Empty[Foo48] = genericEmpty
  implicit val emptyFoo49: Empty[Foo49] = genericEmpty
  implicit val emptyFoo50: Empty[Foo50] = genericEmpty
  implicit val emptyFoo51: Empty[Foo51] = genericEmpty
  implicit val emptyFoo52: Empty[Foo52] = genericEmpty
  implicit val emptyFoo53: Empty[Foo53] = genericEmpty
  implicit val emptyFoo54: Empty[Foo54] = genericEmpty
  implicit val emptyFoo55: Empty[Foo55] = genericEmpty
  implicit val emptyFoo56: Empty[Foo56] = genericEmpty
  implicit val emptyFoo57: Empty[Foo57] = genericEmpty
  implicit val emptyFoo58: Empty[Foo58] = genericEmpty
  implicit val emptyFoo59: Empty[Foo59] = genericEmpty
  implicit val emptyFoo60: Empty[Foo60] = genericEmpty
  implicit val emptyFoo61: Empty[Foo61] = genericEmpty
  implicit val emptyFoo62: Empty[Foo62] = genericEmpty
  implicit val emptyFoo63: Empty[Foo63] = genericEmpty
  implicit val emptyFoo64: Empty[Foo64] = genericEmpty
  implicit val emptyFoo65: Empty[Foo65] = genericEmpty
  implicit val emptyFoo66: Empty[Foo66] = genericEmpty
  implicit val emptyFoo67: Empty[Foo67] = genericEmpty
  implicit val emptyFoo68: Empty[Foo68] = genericEmpty
  implicit val emptyFoo69: Empty[Foo69] = genericEmpty
  implicit val emptyFoo70: Empty[Foo70] = genericEmpty
  implicit val emptyFoo71: Empty[Foo71] = genericEmpty
  implicit val emptyFoo72: Empty[Foo72] = genericEmpty
  implicit val emptyFoo73: Empty[Foo73] = genericEmpty
  implicit val emptyFoo74: Empty[Foo74] = genericEmpty
  implicit val emptyFoo75: Empty[Foo75] = genericEmpty
  implicit val emptyFoo76: Empty[Foo76] = genericEmpty
  implicit val emptyFoo77: Empty[Foo77] = genericEmpty
  implicit val emptyFoo78: Empty[Foo78] = genericEmpty
  implicit val emptyFoo79: Empty[Foo79] = genericEmpty
  implicit val emptyFoo80: Empty[Foo80] = genericEmpty
  implicit val emptyFoo81: Empty[Foo81] = genericEmpty
  implicit val emptyFoo82: Empty[Foo82] = genericEmpty
  implicit val emptyFoo83: Empty[Foo83] = genericEmpty
  implicit val emptyFoo84: Empty[Foo84] = genericEmpty
  implicit val emptyFoo85: Empty[Foo85] = genericEmpty
  implicit val emptyFoo86: Empty[Foo86] = genericEmpty
  implicit val emptyFoo87: Empty[Foo87] = genericEmpty
  implicit val emptyFoo88: Empty[Foo88] = genericEmpty
  implicit val emptyFoo89: Empty[Foo89] = genericEmpty
  implicit val emptyFoo90: Empty[Foo90] = genericEmpty
  implicit val emptyFoo91: Empty[Foo91] = genericEmpty
  implicit val emptyFoo92: Empty[Foo92] = genericEmpty
  implicit val emptyFoo93: Empty[Foo93] = genericEmpty
  implicit val emptyFoo94: Empty[Foo94] = genericEmpty
  implicit val emptyFoo95: Empty[Foo95] = genericEmpty
  implicit val emptyFoo96: Empty[Foo96] = genericEmpty
  implicit val emptyFoo97: Empty[Foo97] = genericEmpty
  implicit val emptyFoo98: Empty[Foo98] = genericEmpty
  implicit val emptyFoo99: Empty[Foo99] = genericEmpty
  implicit val emptyFoo100: Empty[Foo100] = genericEmpty
  implicit val emptyFoo101: Empty[Foo101] = genericEmpty
  implicit val emptyFoo102: Empty[Foo102] = genericEmpty
  implicit val emptyFoo103: Empty[Foo103] = genericEmpty
  implicit val emptyFoo104: Empty[Foo104] = genericEmpty
  implicit val emptyFoo105: Empty[Foo105] = genericEmpty
  implicit val emptyFoo106: Empty[Foo106] = genericEmpty
  implicit val emptyFoo107: Empty[Foo107] = genericEmpty
  implicit val emptyFoo108: Empty[Foo108] = genericEmpty
  implicit val emptyFoo109: Empty[Foo109] = genericEmpty
  implicit val emptyFoo110: Empty[Foo110] = genericEmpty
  implicit val emptyFoo111: Empty[Foo111] = genericEmpty
  implicit val emptyFoo112: Empty[Foo112] = genericEmpty
  implicit val emptyFoo113: Empty[Foo113] = genericEmpty
  implicit val emptyFoo114: Empty[Foo114] = genericEmpty
  implicit val emptyFoo115: Empty[Foo115] = genericEmpty
  implicit val emptyFoo116: Empty[Foo116] = genericEmpty
  implicit val emptyFoo117: Empty[Foo117] = genericEmpty
  implicit val emptyFoo118: Empty[Foo118] = genericEmpty
  implicit val emptyFoo119: Empty[Foo119] = genericEmpty
  implicit val emptyFoo120: Empty[Foo120] = genericEmpty
  implicit val emptyFoo121: Empty[Foo121] = genericEmpty
  implicit val emptyFoo122: Empty[Foo122] = genericEmpty
  implicit val emptyFoo123: Empty[Foo123] = genericEmpty
  implicit val emptyFoo124: Empty[Foo124] = genericEmpty
  implicit val emptyFoo125: Empty[Foo125] = genericEmpty
  implicit val emptyFoo126: Empty[Foo126] = genericEmpty
  implicit val emptyFoo127: Empty[Foo127] = genericEmpty
  implicit val emptyFoo128: Empty[Foo128] = genericEmpty
  implicit val emptyFoo129: Empty[Foo129] = genericEmpty
  implicit val emptyFoo130: Empty[Foo130] = genericEmpty
  implicit val emptyFoo131: Empty[Foo131] = genericEmpty
  implicit val emptyFoo132: Empty[Foo132] = genericEmpty
  implicit val emptyFoo133: Empty[Foo133] = genericEmpty
  implicit val emptyFoo134: Empty[Foo134] = genericEmpty
  implicit val emptyFoo135: Empty[Foo135] = genericEmpty
  implicit val emptyFoo136: Empty[Foo136] = genericEmpty
  implicit val emptyFoo137: Empty[Foo137] = genericEmpty
  implicit val emptyFoo138: Empty[Foo138] = genericEmpty
  implicit val emptyFoo139: Empty[Foo139] = genericEmpty
  implicit val emptyFoo140: Empty[Foo140] = genericEmpty
  implicit val emptyFoo141: Empty[Foo141] = genericEmpty
  implicit val emptyFoo142: Empty[Foo142] = genericEmpty
  implicit val emptyFoo143: Empty[Foo143] = genericEmpty
  implicit val emptyFoo144: Empty[Foo144] = genericEmpty
  implicit val emptyFoo145: Empty[Foo145] = genericEmpty
  implicit val emptyFoo146: Empty[Foo146] = genericEmpty
  implicit val emptyFoo147: Empty[Foo147] = genericEmpty
  implicit val emptyFoo148: Empty[Foo148] = genericEmpty
  implicit val emptyFoo149: Empty[Foo149] = genericEmpty

}
